あなたは経験豊富なWebアプリケーション開発者です。ユーザーが複数の商材グループからそれぞれ1つずつ商材を選択し、それらをレイヤー構造を保ちながらキャンバス上に自由に配置できるブラウザベースのアプリケーションの完全なソースコード（HTML、CSS、JavaScript）を生成してください。すべての処理はクライアントサイドのJavaScriptで行い、サーバーサイドの機能は可能な限り使用しないでください。

### アプリケーションの画面構成と機能:

**1. 画面レイアウト:**
    * 画面全体を2つの主要な領域に分割します。
        * **左側 75%:** 自由なキャンバスエリアとして機能します。商材がここに配置されます。
        * **右側 25%:** 商材選択エリアとして機能します。

**2. 商材選択エリア（右側 25%）:**
    * **商材グループ:** 商材選択エリアは、「商材グループ1」から「商材グループ4」までの**4つのグループ**に分かれています。各グループは明確に区別できるように表示してください。
    * **商材写真:** 各商材グループには、それぞれ**4つずつ**の商材写真が掲載されます。商材写真はダミー画像（例: `group1_item1.png`, `group2_item2.png` など）で表現し、適切なサイズで表示されるようにしてください。
    * **単一選択:** ユーザーは、**各商材グループ内で1つだけ**商材写真を選択できるUIを実装してください。あるグループで別の写真が選択された場合、そのグループ内で以前選択されていた写真は非選択状態に戻るようにします。
    * **キャンバスへの貼り付け:** ユーザーが商材写真を選択すると、その写真が自動的にキャンバスエリアに貼り付けられ、表示されるようにしてください。

**3. キャンバスエリア（左側 75%）:**
    * **商材の配置:** 商材選択エリアで選択された商材写真がここに表示されます。
    * **ドラッグ＆ドロップ配置:** ユーザーは、キャンバス内の商材画像をマウスドラッグによって自由に配置（移動）できるようにしてください。
    * **レイヤーの上下関係:** キャンバスに貼り付けられた商材画像は、以下の優先順位で重ね順（z-index）が決定されます。
        * **グループ1の商材:** 最も背景側（z-indexが最小）
        * **グループ2の商材:** グループ1より上
        * **グループ3の商材:** グループ2より上
        * **グループ4の商材:** 最も手前側（z-indexが最大）
        * 同じグループ内で別の写真が選択された場合、現在キャンバス内にあるそのグループの画像は、新しく選択された画像と入れ替わるようにしてください。移動後の位置は維持されます。
    * **初期位置:** 各グループから選択された商材写真がキャンバスに貼り付けられた際の初期位置は、重ならないように、しかし分かりやすい位置に配置してください。

**4. 画像保存機能:**
    * 最終的に商材画像を配置する場所が決まったら、ユーザーは**保存ボタン**を押すことによって、キャンバス上の**すべての商材画像を組み合わせた状態の1枚の画像**をローカル環境に保存できるようにしてください。
    * 保存される画像は、商材写真が重ね順通りに描画された、最終的な状態の画像としてください。

### 技術要件:
* すべての機能は純粋なJavaScript（ES6以降）、HTML5、CSS3を使用して実装してください。
* HTMLは意味的な構造を意識して記述し、各UI要素が明確になるようにしてください。
* CSSは、画面の分割レイアウト（75%/25%）、商材選択エリアのグループ分け、商材写真の表示、選択状態のフィードバック、キャンバス上の商材のスタイリング（ドラッグ時の視覚フィードバックなど）、およびレイヤーの上下関係（z-indexの適用）を実装してください。
* JavaScriptは、DOM操作、イベントハンドリング（クリック、ドラッグ）、Canvas API（画像結合と保存のため）、および画像の読み込み・描画を適切に使用してください。
* 商材のダミー画像は、JavaScriptで生成するか、またはコードに直接Base64エンコードされたデータURIとして埋め込んでください。外部リソースとして参照する必要はありません。
* 画像保存機能では、最終的な結合画像をBlobとして生成し、ダウンロードリンクを提供することでユーザーに保存を促してください。
* **レスポンシブデザインは必須ではありませんが、基本的なデスクトップブラウザでの動作とレイアウトの安定性を確保してください。**

生成するコードは、読みやすく、コメントを適切に追加し、可能な限りモジュール化を意識してください。